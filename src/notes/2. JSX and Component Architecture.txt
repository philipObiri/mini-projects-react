1. What is the idea behind Using Components?
Components are a key concept embraced by React. The idea behind this concept is, that user interfaces can be split into smaller, encapsulated chunks of code. 

This can help with building more complex user interfaces as developers don't have to work on one big chunk of code.

React components typically include markup (JSX code) that defines which content and structure should be rendered as well as logic (JavaScript with extra React features) and styles (CSS).


2. How can you create a React Component?
When working with React, React components can be defined in two different ways:
- As JavaScript classes (Class Based Components)
- As JavaScript functions (Function based components)

The first approach (classes) isn't really used anymore and exists mainly for historic reasons (and maybe in old code bases). 
Instead, the default way of creating components with modern React, is to use JavaScript functions.

3.What turns a regular function into a React function component ?
When using functions, only certain kinds of functions qualify as React components. 
Specifically, a function must return some "renderable" content like JSX code.

In addition, when using a custom component function as a component inside of JSX code, 
developers must use component names that start with an uppercase character (like <SubmitButton />).

This is required by React to tell custom components apart from built-in components that reflect 
native HTML elements like <div> etc.


4. Which core rules should you keep in mind when regarding JSX elements ?
When working with JSX code, it is important to keep in mind that JSX is neither HTML code nor regular vanilla JavaScript code. 

Instead, JSX is "syntactical sugar" provided by a build workflow that's part of all modern React projects. 

JSX gets transformed into regular JavaScript method calls behind the scenes.

Therefore, a couple of rules are enforced:

- When using custom components inside of JSX code, these components must start with an uppercase character (e.g. <SubmitButton>)

- In general, PascalCase naming should be used for custom component

- Built-in components that reflect native HTML elements are all-lowercase (like <p>)

- Void elements (like <img>) must be self-closing: <img /> instead of <img>

- JSX values are like regular JavaScript values, hence in places, where a single value is expected (e.g. after the return keyword), 
  no sibling values are allowed.


5. How is the JSX code handled by React and ReactDOM ?
JSX code is picked up and handled by the React library.
React & ReactDOM "translate" renderable content like JSX code into actual DOM-manipulating instructions.

To be precise, all modern React projects contain a build workflow that transforms JSX code into React.createElement(...) method calls. 

React.createElement(...) is then the actual instruction that is received and handled by React. 

Ultimately, the above-mentioned DOM-manipulation instructions are then generated by ReactDOM.
