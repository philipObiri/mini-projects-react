1. Which problem does the concept of state solve ?
State allows developers to manage data which, when changed, causes React to re-evaluate (re-execute) the component for which the state was registered. This is a key feature which allows developers to build truly dynamic React applications.


2. What is the difference between props and state ?
Props are used for passing data from parent to child components. 
It's a feature that allows developers to build re-usable components ("UI building blocks").


State on the other hand allows developers to change data and force UI updates,
as described above.


3. How is state registered in a component?
State is registered by calling the built-in useState() hook that is provided by React.
It's a standard JavaScript function that is handled in a special way internally by React.
When calling useState(), a new state value is registered in and tied to a component.
When the state value is updated, the component is re-evaluated by React.

4. What does the useStateHook provide ?
useState() returns an array with exactly two elements:

- The first element is the current state value
- The second element is a function that should be called to update the state value.

5. How many state values can be registered for a single component ?
As many as you need !

6. Does State affect other components(than the component in which it was ) ? 